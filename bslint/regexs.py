# this characters need escaping . ^ $ * + ? { } [ ] \ | ( )
import bslint.constants as const
import collections

Token = collections.namedtuple('Token', ['regex', 'type', 'indentation'])

List = [
    Token._make([r"\n", const.NEW_LINE, const.NO_INDENTATION]),
    Token._make([r"\s+", None, const.NO_INDENTATION]),

    Token._make(["\+=", const.OPERATOR, const.NO_INDENTATION]),
    Token._make(["-=", const.OPERATOR, const.NO_INDENTATION]),
    Token._make(["\*=", const.OPERATOR, const.NO_INDENTATION]),
    Token._make(["/=", const.OPERATOR, const.NO_INDENTATION]),
    Token._make([r"\\=", const.OPERATOR, const.NO_INDENTATION]),  # divide integer
    Token._make(["<<=", const.OPERATOR, const.NO_INDENTATION]),
    Token._make([">>=", const.OPERATOR, const.NO_INDENTATION]),
    Token._make(["<>", const.OPERATOR, const.NO_INDENTATION]),
    Token._make([">=", const.OPERATOR, const.NO_INDENTATION]),
    Token._make(["<=", const.OPERATOR, const.NO_INDENTATION]),
    Token._make([">=", const.OPERATOR, const.NO_INDENTATION]),
    Token._make(["=>", const.OPERATOR, const.NO_INDENTATION]),
    Token._make(["=<", const.OPERATOR, const.NO_INDENTATION]),

    Token._make([">>", const.OPERATOR, const.NO_INDENTATION]),
    Token._make(["<<", const.OPERATOR, const.NO_INDENTATION]),

    Token._make([r"\.", const.SPECIAL_OPERATOR, const.NO_INDENTATION]),
    Token._make([":", const.SPECIAL_OPERATOR, const.NO_INDENTATION]),
    Token._make([r"\^", const.OPERATOR, const.NO_INDENTATION]),
    Token._make(["=", const.OPERATOR, const.NO_INDENTATION]),
    Token._make(["-", const.OPERATOR, const.NO_INDENTATION]),
    Token._make(["\+", const.OPERATOR, const.NO_INDENTATION]),
    Token._make(["\*", const.OPERATOR, const.NO_INDENTATION]),
    Token._make([r"/", const.OPERATOR, const.NO_INDENTATION]),
    Token._make(["<", const.OPERATOR, const.NO_INDENTATION]),
    Token._make([">", const.OPERATOR, const.NO_INDENTATION]),

    Token._make([r"\(", const.BRACKET, const.NO_INDENTATION]),
    Token._make([r"\)", const.BRACKET, const.NO_INDENTATION]),
    Token._make([r"\[", const.SQUARE_BRACKET, const.NO_INDENTATION]),
    Token._make([r"\]", const.SQUARE_BRACKET, const.NO_INDENTATION]),
    Token._make([r"\[", const.CURLY_BRACKET, const.NO_INDENTATION]),
    Token._make([r"\]", const.CURLY_BRACKET, const.NO_INDENTATION]),
    Token._make([",", const.SPECIAL_OPERATOR, const.NO_INDENTATION]),
    Token._make([r"(TRUE)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(GETLASTRUNCOMPILEERROR)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(GETLASTRUNRUNTIMEERROR)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(GETGLOBALAA)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(ELSE IF)\b", const.KEYWORD, const.SPECIAL_INDENTATION]),
    Token._make([r"(END IF)\b", const.KEYWORD, const.DECREMENT_INDENTATION]),
    Token._make([r"(EXIT FOR)\b", const.KEYWORD, const.DECREMENT_INDENTATION]),
    Token._make([r"(FOR EACH)\b", const.KEYWORD, const.INCREMENT_INDENTATION]),
    Token._make([r"(END FOR)\b", const.KEYWORD, const.DECREMENT_INDENTATION]),
    Token._make([r"(END WHILE)\b", const.KEYWORD, const.DECREMENT_INDENTATION]),
    Token._make([r"(EXIT WHILE)\b", const.KEYWORD, const.DECREMENT_INDENTATION]),
    Token._make([r"(END FUNCTION)\b", const.KEYWORD, const.DECREMENT_INDENTATION]),
    Token._make([r"(END SUB)\b", const.KEYWORD, const.DECREMENT_INDENTATION]),
    Token._make([r"(LINE_NUM)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(GOTO)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(CREATEOBJECT)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(ELSEIF)\b", const.KEYWORD, const.SPECIAL_INDENTATION]),
    Token._make([r"(ENDIF)\b", const.KEYWORD, const.DECREMENT_INDENTATION]),
    Token._make([r"(ENDWHILE)\b", const.KEYWORD, const.DECREMENT_INDENTATION]),
    Token._make([r"(EXITWHILE)\b", const.KEYWORD, const.DECREMENT_INDENTATION]),
    Token._make([r"(ENDFUNCTION)\b", const.KEYWORD, const.DECREMENT_INDENTATION]),
    Token._make([r"(ENDSUB)\b", const.KEYWORD, const.DECREMENT_INDENTATION]),
    Token._make([r"(OBJFUN)\b", const.KEYWORD, const.NO_INDENTATION]),

    Token._make([r"(IF)\b", const.KEYWORD, const.INCREMENT_INDENTATION]),
    Token._make([r"(THEN)\b", const.KEYWORD, const.INCREMENT_INDENTATION]),
    Token._make([r"(ELSE)\b", const.KEYWORD, const.SPECIAL_INDENTATION]),
    Token._make([r"(FOR)\b", const.KEYWORD, const.INCREMENT_INDENTATION]),
    Token._make([r"(TO)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(STEP)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(INVALID)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(IN)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(WHILE)\b", const.KEYWORD, const.INCREMENT_INDENTATION]),
    Token._make([r"(FUNCTION)\b", const.KEYWORD, const.INCREMENT_INDENTATION]),
    Token._make([r"(AS)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(RETURN)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(PRINT)\b", const.PRINT_KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(DIM)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(END)\b", const.KEYWORD, const.DECREMENT_INDENTATION]),
    Token._make([r"(MOD)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(STOP)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(AND)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(BOX)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(EACH)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(EVAL)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(EXIT)\b", const.KEYWORD, const.DECREMENT_INDENTATION]),
    Token._make([r"(FALSE)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(LET)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(NEXT)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(NOT)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(OR)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(POS)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"('|rem) *(BSLINT)_(?P<command>[a-z_]+)(:(?P<param>[0-9]+))?.*", const.BSLINT_COMMAND, const.NO_INDENTATION]),
    Token._make([r"('|REM\b) *(.*)", const.COMMENT, const.NO_INDENTATION]),
    Token._make([r"(RUN)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(SUB)\b", const.KEYWORD, const.INCREMENT_INDENTATION]),
    Token._make([r"(TAB)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make([r"(TYPE)\b", const.KEYWORD, const.NO_INDENTATION]),

    Token._make([r"(MAIN)\b", const.KEYWORD, const.NO_INDENTATION]),
    Token._make(["\?", const.PRINT_KEYWORD, const.NO_INDENTATION]),

    Token._make([r"(?P<value>^[a-z_][a-z0-9_]*)(?P<type>\$|%|!|#|&?)", const.ID, const.NO_INDENTATION]),
    Token._make(['\"(.*)\"', const.STRING, const.NO_INDENTATION]),
    Token._make([r"^\d*(\.?\d+){1}", const.NUMERIC, const.NO_INDENTATION])
]
